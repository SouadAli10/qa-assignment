basePath: /api
definitions:
  models.CreateTodoRequest:
    properties:
      completed:
        type: boolean
      description:
        maxLength: 1000
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - title
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      error:
        type: string
    type: object
  models.HealthResponse:
    properties:
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: string
      version:
        type: string
    type: object
  models.PaginatedResponse:
    properties:
      data: {}
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.Todo:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        maxLength: 1000
        type: string
      id:
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
      updated_at:
        type: string
    required:
    - title
    type: object
  models.UpdateTodoRequest:
    properties:
      completed:
        type: boolean
      description:
        maxLength: 1000
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    type: object
host: localhost:3001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive Todo API built with Go Fiber following clean architecture
    principles
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo API
  version: 1.0.0
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Get health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Health check
      tags:
      - health
  /live:
    get:
      consumes:
      - application/json
      description: Check if the API is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Liveness check
      tags:
      - health
  /ready:
    get:
      consumes:
      - application/json
      description: Check if the API is ready to serve requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Readiness check
      tags:
      - health
  /stats:
    get:
      consumes:
      - application/json
      description: Get detailed database connection and data statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get database statistics
      tags:
      - health
  /todos:
    get:
      consumes:
      - application/json
      description: Get all todo items
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - default: created_at
        description: Sort field
        enum:
        - id
        - title
        - completed
        - created_at
        - updated_at
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Search in title and description
        in: query
        name: search
        type: string
      - description: Filter by completion status
        in: query
        name: completed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo item
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo item
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Get a single todo by its ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update an existing todo item
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo update data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a todo
      tags:
      - todos
  /todos/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about todos (total, completed, pending)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get todo statistics
      tags:
      - todos
schemes:
- http
- https
swagger: "2.0"
tags:
- description: Operations about todos
  name: todos
- description: Health check endpoints
  name: health
